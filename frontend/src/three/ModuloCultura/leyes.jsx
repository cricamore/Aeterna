/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { Html } from '@react-three/drei';
import { Box, Button } from "@mui/material";
import Image from 'next/image';
import papel1 from '../../../public/static/textures/Derecho/papel1.png';
import papel2 from '../../../public/static/textures/Derecho/papel2.png';
import papel3 from '../../../public/static/textures/Derecho/papel3.png';
import { useThree } from "@react-three/fiber";

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 800,
  height:500,
  bgcolor: 'background.paper',
  p: 4,
  overflow: 'auto',
};

const buttonAvanzar = {
    position: 'absolute',
    top: '89%',
    left: '70%',
    transform: 'translate(-50%, -50%)',
};

const buttonRetroceder = {
  position: 'absolute',
  top: '89%',
  left: '55%',
  transform: 'translate(-50%, -50%)',
};

const buttonCerrar = {
  position: 'absolute',
  top: '10%',
  left: '10%',
  transform: 'translate(-50%, -50%)',
};

export function Leyes({leccionesCompletadas, setLeccionesCompletadas},props) {
  const { nodes, materials } = useGLTF("/static/leyes.glb");
  const [modalOpen, setModalOpen] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const images = [papel1, papel2, papel3];
  const { gl } = useThree();

  const handleMouseEnter = () => {
    gl.domElement.style.cursor = "pointer";
  };
  const handleMouseLeave = () => {
    gl.domElement.style.cursor = "auto";
  };

  const handleClick = () => {
    setModalOpen(true);
    console.log('hola')
  };

  const handleClose = () => {
    setModalOpen(false);
    setCurrentImageIndex(0)

    const todasLasImagenesVistas = currentImageIndex === images.length - 1;
    if (todasLasImagenesVistas) {
      // Marcar la lección como completada
      setLeccionesCompletadas(prevState => ({
        ...prevState,
        leccion2: true,
      }));
      console.log("lec",leccionesCompletadas)
    }
  };

  const handleNextImage = () => {
    setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
  };

  const handlePreviousImage = () => {
      setCurrentImageIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);
  };
  return (
    <group {...props} dispose={null} 
    onClick={handleClick}
    onPointerEnter={handleMouseEnter}
    onPointerLeave={handleMouseLeave}
    >
      <group scale={0.008}>
        <group
          position={[-218.72, -65.9, 256]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={7.85}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.node_id7.geometry}
            material={materials["36"]}
          />
        </group>
        <group
          position={[-180.39, 39.09, 259.07]}
          rotation={[Math.PI / 2, -0.29, 0]}
          scale={7.85}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.node_id12.geometry}
            material={materials["37"]}
          />
        </group>
        <group
          position={[28.67, -10.24, 259.07]}
          rotation={[Math.PI / 2, -0.29, 0]}
          scale={7.85}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.node_id16.geometry}
            material={materials["38"]}
          />
        </group>
        <group
          position={[-180.99, 39.26, 259.07]}
          rotation={[Math.PI / 2, -0.29, 0]}
          scale={[8, 8, 7.76]}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.node_id20.geometry}
            material={materials["39"]}
          />
        </group>
      </group>
      <Html>
          {modalOpen && (
              <div style={style}>
                {/* <Modal> */}
                  <Box>
                    <Image src={images[currentImageIndex]} width={657} height={486} priority={true} rel="preload" />
                    <Button
                    size='large'
                    variant="text" 
                    onClick={handleClose} 
                    style={{ ...buttonCerrar, color:'#804000'}}
                    >
                        X
                    </Button>
                    <Button 
                    size='large'
                    variant="text" 
                    onClick={handleNextImage} 
                    style={{ ...buttonAvanzar, display: currentImageIndex === images.length - 1 ? 'none' : 'block', color:'#804000' }}
                    >
                        Siguiente
                    </Button>
                    <Button 
                    size='large'
                    variant="text" 
                    onClick={handlePreviousImage} 
                    style={{ ...buttonRetroceder, display: currentImageIndex === 0 ? 'none' : 'block', color:'#804000' }}
                    >
                        Atrás
                    </Button>
                  </Box>
                {/* </Modal> */}
              </div>
          )}
        </Html>
    </group>
  );
}

useGLTF.preload("/static/leyes.glb");
